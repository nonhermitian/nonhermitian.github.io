<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>nonhermitian.org</id>
  <title>Paul Nation's Blog</title>
  <updated>2021-11-28T14:19:05.583146+00:00</updated>
  <link href="nonhermitian.org"/>
  <link href="nonhermitian.org/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.20">ABlog</generator>
  <entry>
    <id>nonhermitian.org/posts/2021/2021-10-07-vqe_program.html</id>
    <title>Custom VQE Program for Qiskit Runtime</title>
    <updated>2021-10-07T00:00:00-04:00</updated>
    <content type="html">&lt;p&gt;Here we will demonstrate how to create, upload, and use a custom Program for Qiskit Runtime.  As the utility of the Runtime execution engine lies in its ability to execute many quantum circuits with low latencies, this tutorial will show how to create your own Variational Quantum Eigensolver (VQE) program from scratch.&lt;/p&gt;
&lt;p&gt;You must have Qiskit 0.30+ installed.&lt;/p&gt;
</content>
    <link href="nonhermitian.org/posts/2021/2021-10-07-vqe_program.html" rel="alternate"/>
    <summary>Here we will demonstrate how to create, upload, and use a custom Program for Qiskit Runtime.  As the utility of the Runtime execution engine lies in its ability to execute many quantum circuits with low latencies, this tutorial will show how to create your own Variational Quantum Eigensolver (VQE) program from scratch.You must have Qiskit 0.30+ installed.</summary>
    <category term="Custom" label="Custom"/>
    <published>2021-10-07T00:00:00-04:00</published>
  </entry>
  <entry>
    <id>nonhermitian.org/posts/2021/2021-10-13-expval_program.html</id>
    <title>Custom Expectation Value Program for the Qiskit Runtime</title>
    <updated>2021-10-13T00:00:00-04:00</updated>
    <content type="html">&lt;p&gt;Here we will show how to make a program that takes a circuit, or list of circuits, and computes the expectation values of one or more diagonal operators.&lt;/p&gt;
&lt;p&gt;You must have Qiskit 0.30+ installed.&lt;/p&gt;
</content>
    <link href="nonhermitian.org/posts/2021/2021-10-13-expval_program.html" rel="alternate"/>
    <summary>Here we will show how to make a program that takes a circuit, or list of circuits, and computes the expectation values of one or more diagonal operators.You must have Qiskit 0.30+ installed.</summary>
    <category term="Custom" label="Custom"/>
    <published>2021-10-13T00:00:00-04:00</published>
  </entry>
  <entry>
    <id>nonhermitian.org/posts/2021/2021-10-27-dynamic_BV.html</id>
    <title>Dynamic Bernstein-Vazirani using mid-circuit reset and measurement</title>
    <updated>2021-10-27T00:00:00-04:00</updated>
    <content type="html">&lt;p&gt;The ability to do mid-circuit reset and measurement unlocks a variety of tools for executing quantum circuits.  A brief discussion is given in this &lt;a class="reference external" href="https://www.ibm.com/blogs/research/2021/02/quantum-mid-circuit-measurement/"&gt;IBM Research blog post&lt;/a&gt;.  On particular possibility is the ability to reuse qubits, and in doing so reduce the hardware requirements of some algorithms.  The Bernstein-Vazirani (BV) algorithm is one such example.  In particular, when using phase-kickback, BV usually requires a high degree of qubit connectivity to impliment.  This has been used by trapped-ion hardware vendors to show that their hardware gives better fidelity on these problems, e.g. see (&lt;a class="reference external" href="https://arxiv.org/abs/2102.00371"&gt;https://arxiv.org/abs/2102.00371&lt;/a&gt; and &lt;a class="reference external" href="https://www.nature.com/articles/s41467-019-13534-2"&gt;https://www.nature.com/articles/s41467-019-13534-2&lt;/a&gt;).  However, with reset and measurement, BV requires only two qubits, making connectivity differences mute.  We showed this in a reply Tweet: &lt;a class="reference external" href="https://twitter.com/nonhermitian/status/1362348935440986113"&gt;https://twitter.com/nonhermitian/status/1362348935440986113&lt;/a&gt;, but did not explain how we got that figure.  So here is how I did it.&lt;/p&gt;
&lt;p&gt;Here we select the backend and extract its two-qubit gate coupling map.  This is not the same backend used in the original figure as, at the time or writing, that one is offline.  It is however the same processor family and revision.&lt;/p&gt;
</content>
    <link href="nonhermitian.org/posts/2021/2021-10-27-dynamic_BV.html" rel="alternate"/>
    <summary>The ability to do mid-circuit reset and measurement unlocks a variety of tools for executing quantum circuits.  A brief discussion is given in this IBM Research blog post.  On particular possibility is the ability to reuse qubits, and in doing so reduce the hardware requirements of some algorithms.  The Bernstein-Vazirani (BV) algorithm is one such example.  In particular, when using phase-kickback, BV usually requires a high degree of qubit connectivity to impliment.  This has been used by trapped-ion hardware vendors to show that their hardware gives better fidelity on these problems, e.g. see (https://arxiv.org/abs/2102.00371 and https://www.nature.com/articles/s41467-019-13534-2).  However, with reset and measurement, BV requires only two qubits, making connectivity differences mute.  We showed this in a reply Tweet: https://twitter.com/nonhermitian/status/1362348935440986113, but did not explain how we got that figure.  So here is how I did it.Here we select the backend and extract its two-qubit gate coupling map.  This is not the same backend used in the original figure as, at the time or writing, that one is offline.  It is however the same processor family and revision.</summary>
    <category term="Dynamic" label="Dynamic"/>
    <published>2021-10-27T00:00:00-04:00</published>
  </entry>
  <entry>
    <id>nonhermitian.org/posts/2021/2021-10-31-best_swap_mapper_qiskit.html</id>
    <title>Choosing the best Qiskit swap mapper</title>
    <updated>2021-10-31T00:00:00-04:00</updated>
    <content type="html">&lt;p&gt;One of the most important (perhaps the most important) steps when compiling quantum circuits for architectures with limited connectivity is swap mapping.  If a requested two-qubit gate cannot be implimented directly on hardware, the states of the corresponding qubits must be swapped with those of their neighboors until the states reside on qubits where a two qubit gate is supported.  Swap gates are expensive, equal to three CNOT gates, and therefore moving qubit states around using the fewest number of swap gates is desireable.  Unfortunately, directly computing the minimum number of swap gates is NP-complete, and heuristics need to be developed that come close to the ideal solution while scaling favorably with the number of qubits.&lt;/p&gt;
&lt;p&gt;Qiskit supports a variety of swap mappers and other optimization settings, and how to best set these options is important for getting high-fidelty results.  Additionally, there are other Qiskit compatible compilers out there that should also be evaluated.  To this end, here we look at a selection of circuits compiled with various Qiskit compiler settings, as well as those produced with the &lt;a class="reference external" href="https://cambridgequantum.com/home/"&gt;Cambridge Quantum Computing (CQC)&lt;/a&gt; &lt;a class="reference external" href="https://github.com/CQCL/tket"&gt;Tket compiler&lt;/a&gt;.  We will investigate the performance of these methods in terms of both number of CNOT gates in the output, as well as the associated runtimes.  Because Qiskit swap mappers are stochastic, we will run each one several times and plot the distributions of results.&lt;/p&gt;
</content>
    <link href="nonhermitian.org/posts/2021/2021-10-31-best_swap_mapper_qiskit.html" rel="alternate"/>
    <summary>One of the most important (perhaps the most important) steps when compiling quantum circuits for architectures with limited connectivity is swap mapping.  If a requested two-qubit gate cannot be implimented directly on hardware, the states of the corresponding qubits must be swapped with those of their neighboors until the states reside on qubits where a two qubit gate is supported.  Swap gates are expensive, equal to three CNOT gates, and therefore moving qubit states around using the fewest number of swap gates is desireable.  Unfortunately, directly computing the minimum number of swap gates is NP-complete, and heuristics need to be developed that come close to the ideal solution while scaling favorably with the number of qubits.Qiskit supports a variety of swap mappers and other optimization settings, and how to best set these options is important for getting high-fidelty results.  Additionally, there are other Qiskit compatible compilers out there that should also be evaluated.  To this end, here we look at a selection of circuits compiled with various Qiskit compiler settings, as well as those produced with the Cambridge Quantum Computing (CQC) Tket compiler.  We will investigate the performance of these methods in terms of both number of CNOT gates in the output, as well as the associated runtimes.  Because Qiskit swap mappers are stochastic, we will run each one several times and plot the distributions of results.</summary>
    <category term="bestpractices" label="best practices"/>
    <published>2021-10-31T00:00:00-04:00</published>
  </entry>
  <entry>
    <id>nonhermitian.org/posts/2021/2021-11-28-falcon_r5.html</id>
    <title>Comparison of Falcon R5 processors verse R4</title>
    <updated>2021-11-28T00:00:00-05:00</updated>
    <content type="html">&lt;p&gt;Recently IBM Quantum announced the move to revision 5 (R5) of its Falcon processors &lt;a class="reference external" href="https://twitter.com/jaygambetta/status/1460697559773634570"&gt;see this tweet from Jay Gambetta&lt;/a&gt;.  In particular it was highlighted that there is a 8x reduction in measurement time on these systems.  Lets see if this, or any other enhancements, are visible from the system calibration data.&lt;/p&gt;
&lt;p&gt;The highlight of the recently released Falcon R5 “core” systems is their much improved measurement times (7x) and error rates (2x).  On these systems a measurement is roughly twice as long as a CNOT gate, compared to 13x on the old R4 systems, and allows for implimenting high-fidelity dynamic circuits with resets, mid-circuit measurements, and eventually classically-conditioned gates.  For other tasks, the modest improvements in the CNOT gate errors and &lt;span class="math notranslate nohighlight"&gt;\(T_{1}\)&lt;/span&gt; times are also welcomed.&lt;/p&gt;
</content>
    <link href="nonhermitian.org/posts/2021/2021-11-28-falcon_r5.html" rel="alternate"/>
    <summary>Recently IBM Quantum announced the move to revision 5 (R5) of its Falcon processors see this tweet from Jay Gambetta.  In particular it was highlighted that there is a 8x reduction in measurement time on these systems.  Lets see if this, or any other enhancements, are visible from the system calibration data.The highlight of the recently released Falcon R5 “core” systems is their much improved measurement times (7x) and error rates (2x).  On these systems a measurement is roughly twice as long as a CNOT gate, compared to 13x on the old R4 systems, and allows for implimenting high-fidelity dynamic circuits with resets, mid-circuit measurements, and eventually classically-conditioned gates.  For other tasks, the modest improvements in the CNOT gate errors and T_{1} times are also welcomed.</summary>
    <category term="Falcon" label="Falcon"/>
    <published>2021-11-28T00:00:00-05:00</published>
  </entry>
</feed>
